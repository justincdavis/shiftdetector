"""
This type stub file was generated by pyright.
"""

import numpy
from _typeshed import Incomplete
from collections.abc import Callable, Collection, Hashable, Iterable
from typing import Literal, TypeVar, overload
from typing_extensions import TypeAlias
from networkx.classes.graph import Graph, _Node

_DataFrame: TypeAlias = ...
_ExtensionDtype: TypeAlias = ...
_Axes: TypeAlias = ...
_G = TypeVar("_G", bound=Graph[Hashable])
def to_pandas_adjacency(G: Graph[_Node], nodelist: _Axes[_Node] | None = ..., dtype: numpy.dtype[Incomplete] | None = ..., order: numpy._OrderCF = ..., multigraph_weight: Callable[[list[float]], float] = ..., weight: str = ..., nonedge: float = ...) -> _DataFrame:
    ...

@overload
def from_pandas_adjacency(df: _DataFrame, create_using: type[_G]) -> _G:
    ...

@overload
def from_pandas_adjacency(df: _DataFrame, create_using: None = ...) -> Graph[Incomplete]:
    ...

def to_pandas_edgelist(G: Graph[_Node], source: str | int = ..., target: str | int = ..., nodelist: Iterable[_Node] | None = ..., dtype: _ExtensionDtype | None = ..., edge_key: str | int | None = ...) -> _DataFrame:
    ...

@overload
def from_pandas_edgelist(df: _DataFrame, source: str | int, target: str | int, edge_attr: str | int | list[str | int] | tuple[str | int] | Literal[True] | None, create_using: type[_G], edge_key: str | None = ...) -> _G:
    ...

@overload
def from_pandas_edgelist(df: _DataFrame, source: str | int = ..., target: str | int = ..., edge_attr: str | int | list[str | int] | tuple[str | int] | Literal[True] | None = ..., *, create_using: type[_G], edge_key: str | None = ...) -> _G:
    ...

@overload
def from_pandas_edgelist(df: _DataFrame, source: str | int = ..., target: str | int = ..., edge_attr: str | int | list[str | int] | tuple[str | int] | Literal[True] | None = ..., create_using: None = ..., edge_key: str | None = ...) -> Graph[Incomplete]:
    ...

def to_numpy_array(G: Graph[_Node], nodelist: Collection[_Node] | None = ..., dtype: numpy.dtype[Incomplete] | None = ..., order: numpy._OrderCF = ..., multigraph_weight: Callable[[list[float]], float] = ..., weight: str = ..., nonedge: float = ...) -> numpy.ndarray[Incomplete, numpy.dtype[Incomplete]]:
    ...

@overload
def from_numpy_array(A: numpy.ndarray[Incomplete, Incomplete], parallel_edges: bool = ..., create_using: None = ...) -> Graph[Incomplete]:
    ...

@overload
def from_numpy_array(A: numpy.ndarray[Incomplete, Incomplete], parallel_edges: bool = ..., *, create_using: type[_G]) -> _G:
    ...

@overload
def from_numpy_array(A: numpy.ndarray[Incomplete, Incomplete], parallel_edges: bool, create_using: type[_G]) -> _G:
    ...

