"""
This type stub file was generated by pyright.
"""

from _typeshed import Incomplete, Unused
from collections.abc import Iterator, Mapping, Set as AbstractSet
from typing import Any, Generic, Literal, TypeVar, overload
from typing_extensions import Self
from networkx.classes.graph import Graph, _Edge, _NBunch, _Node

_D = TypeVar("_D")
_U = TypeVar("_U")
class NodeView(Mapping[_Node, dict[str, Any]], AbstractSet[_Node]):
    def __init__(self, graph: Graph[_Node]) -> None:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __iter__(self) -> Iterator[_Node]:
        ...
    
    def __getitem__(self, n: _Node) -> dict[str, Any]:
        ...
    
    def __contains__(self, n: object) -> bool:
        ...
    
    @overload
    def __call__(self, data: Literal[False] = ..., default: Incomplete = ...) -> Iterator[_Node]:
        ...
    
    @overload
    def __call__(self, data: Literal[True] | str, default: Incomplete = ...) -> Iterator[tuple[_Node, dict[str, Any]]]:
        ...
    
    def data(self, data: bool | str = ..., default: Incomplete = ...) -> NodeDataView[_Node]:
        ...
    


class NodeDataView(AbstractSet[_Node]):
    def __init__(self, nodedict: Mapping[str, Incomplete], data: bool | str = ..., default: Incomplete = ...) -> None:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __iter__(self) -> Iterator[tuple[_Node, Incomplete]]:
        ...
    
    def __contains__(self, n: object) -> bool:
        ...
    
    def __getitem__(self, n: _Node):
        ...
    


class DiDegreeView(Generic[_Node]):
    def __init__(self, G: Graph[_Node], nbunch: _NBunch[_Node] = ..., weight: None | bool | str = ...) -> None:
        ...
    
    def __call__(self, nbunch: _NBunch[_Node] = ..., weight: None | bool | str = ...) -> DiDegreeView[_Node]:
        ...
    
    def __getitem__(self, n: _Node) -> float:
        ...
    
    def __iter__(self) -> Iterator[tuple[_Node, float]]:
        ...
    
    def __len__(self) -> int:
        ...
    


class DegreeView(DiDegreeView[_Node]):
    ...


class OutDegreeView(DiDegreeView[_Node]):
    ...


class InDegreeView(DiDegreeView[_Node]):
    ...


class MultiDegreeView(DiDegreeView[_Node]):
    ...


class DiMultiDegreeView(DiDegreeView[_Node]):
    ...


class InMultiDegreeView(DiDegreeView[_Node]):
    ...


class OutMultiDegreeView(DiDegreeView[_Node]):
    ...


class OutEdgeDataView(Generic[_Node, _D]):
    def __init__(self, viewer, nbunch: _NBunch[_Node] = ..., data: bool = ..., default: Incomplete | None = ...) -> None:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __iter__(self) -> Iterator[_D]:
        ...
    
    def __contains__(self, e: _Edge[_Node]) -> bool:
        ...
    


class EdgeDataView(OutEdgeDataView[_Node, _D]):
    ...


class InEdgeDataView(OutEdgeDataView[_Node, _D]):
    ...


class OutMultiEdgeDataView(OutEdgeDataView[_Node, _D]):
    def __init__(self, viewer, nbunch: _NBunch[_Node] = ..., data: bool = ..., keys: bool = ..., default: Incomplete | None = ...) -> None:
        ...
    


class MultiEdgeDataView(OutEdgeDataView[_Node, _D]):
    ...


class InMultiEdgeDataView(OutEdgeDataView[_Node, _D]):
    ...


class OutEdgeView(AbstractSet[Incomplete], Mapping[Incomplete, Incomplete], Generic[_Node]):
    def __init__(self, G: Graph[_Node]) -> None:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __iter__(self) -> Iterator[tuple[_Node, _Node]]:
        ...
    
    def __contains__(self, e: _Edge[_Node]) -> bool:
        ...
    
    def __getitem__(self, e: _Edge[_Node]) -> dict[str, Any]:
        ...
    
    @overload
    def __call__(self, nbunch: None = ..., data: Literal[False] = ..., default: Unused = ...) -> Self:
        ...
    
    @overload
    def __call__(self, nbunch: _NBunch[_Node], data: Literal[True], default: None = ...) -> OutEdgeDataView[_Node, tuple[_Node, _Node, dict[str, Incomplete]]]:
        ...
    
    @overload
    def __call__(self, nbunch: _NBunch[_Node] = ..., *, data: Literal[True], default: None = ...) -> OutEdgeDataView[_Node, tuple[_Node, _Node, dict[str, Incomplete]]]:
        ...
    
    @overload
    def __call__(self, nbunch: _NBunch[_Node], data: str, default: _U | None = ...) -> OutEdgeDataView[_Node, tuple[_Node, _Node, _U]]:
        ...
    
    @overload
    def __call__(self, nbunch: _NBunch[_Node] = ..., *, data: str, default: _U | None = ...) -> OutEdgeDataView[_Node, tuple[_Node, _Node, _U]]:
        ...
    
    @overload
    def data(self, data: Literal[False], default: Unused = ..., nbunch: None = ...) -> Self:
        ...
    
    @overload
    def data(self, data: Literal[True] = ..., default: None = ..., nbunch: _NBunch[_Node] = ...) -> OutEdgeDataView[_Node, tuple[_Node, _Node, dict[str, Incomplete]]]:
        ...
    
    @overload
    def data(self, data: str, default: _U | None = ..., nbunch: _NBunch[_Node] = ...) -> OutEdgeDataView[_Node, tuple[_Node, _Node, _U]]:
        ...
    


class EdgeView(OutEdgeView[_Node]):
    ...


class InEdgeView(OutEdgeView[_Node]):
    ...


class OutMultiEdgeView(OutEdgeView[_Node]):
    @overload
    def __call__(self, nbunch: None = ..., data: Literal[False] = ..., *, keys: Literal[True], default: Unused = ...) -> Self:
        ...
    
    @overload
    def __call__(self, nbunch: None, data: Literal[False], keys: Literal[True], default: Unused = ...) -> Self:
        ...
    
    @overload
    def __call__(self, nbunch: _NBunch[_Node], data: Literal[True], keys: bool = ..., default: None = ...) -> OutMultiEdgeDataView[_Node, tuple[_Node, _Node, dict[str, Incomplete]]]:
        ...
    
    @overload
    def __call__(self, nbunch: _NBunch[_Node] = ..., *, data: Literal[True], keys: bool = ..., default: None = ...) -> OutMultiEdgeDataView[_Node, tuple[_Node, _Node, dict[str, Incomplete]]]:
        ...
    
    @overload
    def __call__(self, nbunch: _NBunch[_Node], data: str, keys: bool = ..., default: _U | None = ...) -> OutMultiEdgeDataView[_Node, tuple[_Node, _Node, _U]]:
        ...
    
    @overload
    def __call__(self, nbunch: _NBunch[_Node] = ..., *, data: str, keys: bool = ..., default: _U | None = ...) -> OutMultiEdgeDataView[_Node, tuple[_Node, _Node, _U]]:
        ...
    
    @overload
    def data(self, data: Literal[False], keys: Literal[False] = ..., default: Unused = ..., nbunch: None = ...) -> Self:
        ...
    
    @overload
    def data(self, data: Literal[True] = ..., keys: bool = ..., default: None = ..., nbunch: _NBunch[_Node] = ...) -> OutMultiEdgeDataView[_Node, tuple[_Node, _Node, dict[str, Incomplete]]]:
        ...
    
    @overload
    def data(self, data: str, keys: bool = ..., default: _U | None = ..., nbunch: _NBunch[_Node] = ...) -> OutMultiEdgeDataView[_Node, tuple[_Node, _Node, _U]]:
        ...
    


class MultiEdgeView(OutMultiEdgeView[_Node]):
    ...


class InMultiEdgeView(OutMultiEdgeView[_Node]):
    ...


