"""
This type stub file was generated by pyright.
"""

from _typeshed import Incomplete
from collections.abc import Generator, Iterable
from typing import Literal, TypeVar, overload
from networkx.classes.graph import Graph, _Node

_U = TypeVar("_U")
@overload
def edge_boundary(G: Graph[_Node], nbunch1: Iterable[_Node], nbunch2: Iterable[_Node] | None = ..., data: Literal[False] = ..., keys: Literal[False] = ..., default=...) -> Generator[tuple[_Node, _Node], None, None]:
    ...

@overload
def edge_boundary(G: Graph[_Node], nbunch1: Iterable[_Node], nbunch2: Iterable[_Node] | None, data: Literal[True], keys: Literal[False] = ..., default=...) -> Generator[tuple[_Node, _Node, dict[str, Incomplete]], None, None]:
    ...

@overload
def edge_boundary(G: Graph[_Node], nbunch1: Iterable[_Node], nbunch2: Iterable[_Node] | None = ..., *, data: Literal[True], keys: Literal[False] = ..., default=...) -> Generator[tuple[_Node, _Node, dict[str, Incomplete]], None, None]:
    ...

@overload
def edge_boundary(G: Graph[_Node], nbunch1: Iterable[_Node], nbunch2: Iterable[_Node] | None, data: str, keys: Literal[False] = ..., default: _U | None = ...) -> Generator[tuple[_Node, _Node, dict[str, _U]], None, None]:
    ...

@overload
def edge_boundary(G: Graph[_Node], nbunch1: Iterable[_Node], nbunch2: Iterable[_Node] | None = ..., *, data: str, keys: Literal[False] = ..., default: _U | None = ...) -> Generator[tuple[_Node, _Node, dict[str, _U]], None, None]:
    ...

@overload
def edge_boundary(G: Graph[_Node], nbunch1: Iterable[_Node], nbunch2: Iterable[_Node] | None, data: Literal[False], keys: Literal[True], default=...) -> Generator[tuple[_Node, _Node, int], None, None]:
    ...

@overload
def edge_boundary(G: Graph[_Node], nbunch1: Iterable[_Node], nbunch2: Iterable[_Node] | None = ..., data: Literal[False] = ..., *, keys: Literal[True], default=...) -> Generator[tuple[_Node, _Node, int], None, None]:
    ...

@overload
def edge_boundary(G: Graph[_Node], nbunch1: Iterable[_Node], nbunch2: Iterable[_Node] | None, data: Literal[True], keys: Literal[True], default=...) -> Generator[tuple[_Node, _Node, int, dict[str, Incomplete]], None, None]:
    ...

@overload
def edge_boundary(G: Graph[_Node], nbunch1: Iterable[_Node], nbunch2: Iterable[_Node] | None = ..., *, data: Literal[True], keys: Literal[True], default=...) -> Generator[tuple[_Node, _Node, int, dict[str, Incomplete]], None, None]:
    ...

@overload
def edge_boundary(G: Graph[_Node], nbunch1: Iterable[_Node], nbunch2: Iterable[_Node] | None, data: str, keys: Literal[True], default: _U | None = ...) -> Generator[tuple[_Node, _Node, int, dict[str, _U]], None, None]:
    ...

@overload
def edge_boundary(G: Graph[_Node], nbunch1: Iterable[_Node], nbunch2: Iterable[_Node] | None = ..., *, data: str, keys: Literal[True], default: _U | None = ...) -> Generator[tuple[_Node, _Node, int, dict[str, _U]], None, None]:
    ...

def node_boundary(G: Graph[_Node], nbunch1: Iterable[_Node], nbunch2: Iterable[_Node] | None = ...) -> set[_Node]:
    ...

